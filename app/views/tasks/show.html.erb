<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= @task.title %> - Detalhes da Tarefa</title>
  <link rel="icon" href="https://cdn-icons-png.flaticon.com/512/595/595067.png" type="image/png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <%= stylesheet_link_tag "task_card", "data-turbo-track": "reload" %>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
</head>
<body>
  <header>
    <div class="brand">
      <i class="fas fa-tasks"></i>
      ToDoDev
    </div>
    <div class="user">
      <button title="Alternar tema" onclick="toggleTheme()">
        <i class="fas fa-sun" id="theme-icon"></i>
      </button>
      <div class="user-icon">
  <%= current_user.name&.first&.upcase || current_user.email&.first&.upcase || 'U' %>
</div>
    </div>
  </header>

  <% if notice %>
    <div class="alert alert-success">
      <i class="fas fa-check-circle"></i>
      <%= notice %>
    </div>
  <% end %>

  <% if alert %>
    <div class="alert alert-danger">
      <i class="fas fa-exclamation-triangle"></i>
      <%= alert %>
    </div>
  <% end %>

<a href="<%= kanban_board_path(@board) %>" class="back-link">
  <i class="fas fa-arrow-left"></i>
  Voltar ao quadro
</a>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const taskLists = document.querySelectorAll('.task-list');
    
    taskLists.forEach(function(taskList) {
      new Sortable(taskList, {
        group: 'kanban-tasks',
        animation: 150,
        ghostClass: 'task-ghost',
        chosenClass: 'task-chosen',
        dragClass: 'task-drag',
        
        onStart: function(evt) {
          document.body.classList.add('dragging');
        },
        
        onEnd: function(evt) {
          document.body.classList.remove('dragging');
          
          const taskId = evt.item.getAttribute('data-task-id');
          const newColumnId = evt.to.getAttribute('data-column-id');
          const newPosition = evt.newIndex;
          
          updateTaskPosition(taskId, newColumnId, newPosition);
        }
      });
    });
  });

  function updateTaskPosition(taskId, columnId, position) {
    fetch(`/tasks/${taskId}/move_column`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        column_id: columnId,
        position: position
      })
    })
    .then(response => response.json())
    .then(data => {
      if (!data.success) {
        alert('Erro ao mover a tarefa: ' + (data.error || ''));
      }
    })
    .catch(error => {
      console.error('Erro:', error);
      alert('Erro ao conectar com o servidor');
    });
  }
</script>


  <main class="task-details-page">
    <div class="task-card">
      <h1>
        <i class="fas fa-sticky-note"></i> 
        <%= @task.title %>
      </h1>

      <div class="task-info">
        <p>
          <strong><i class="fas fa-align-left"></i> Descrição:</strong> 
          <%= @task.description.presence || "Sem descrição fornecida." %>
        </p>

        <p>
          <strong><i class="fas fa-info-circle"></i> Status:</strong> 
          <%= @task.status.presence || "Não definido" %>
        </p>

        <p>
          <strong><i class="fas fa-flag"></i> Prioridade:</strong>
          <% if @task.priority.present? %>
            <span class="priority <%= @task.priority.downcase %>">
              <%= @task.priority.capitalize %>
            </span>
          <% else %>
            <span class="no-priority">Não definida</span>
          <% end %>
        </p>

        <p>
          <strong><i class="fas fa-calendar-alt"></i> Prazo:</strong>
          <% if @task.due_date.present? %>
            <span class="due-date <%= 'overdue' if @task.due_date < Time.current %>">
              <%= @task.due_date.strftime("%d/%m/%Y %H:%M") %>
              <% if @task.due_date < Time.current %>
                <i class="fas fa-exclamation-triangle"></i>
              <% end %>
            </span>
          <% else %>
            <span class="no-date">Sem prazo definido</span>
          <% end %>
        </p>

        <p>
  <strong><i class="fas fa-check-circle"></i> Concluída:</strong>

  <% if @task.column&.name == "Concluído" %>
    <span class="status-done"><i class="fas fa-check"></i> Sim</span>
  <% else %>
    <span class="status-pending"><i class="fas fa-clock"></i> Não</span>
  <% end %>
</p>


        <% if @task.created_at.present? %>
          <p>
            <strong><i class="fas fa-plus-circle"></i> Criada em:</strong>
            <%= @task.created_at.strftime("%d/%m/%Y %H:%M") %>
          </p>
        <% end %>

        <% if @task.updated_at.present? && @task.updated_at != @task.created_at %>
          <p>
            <strong><i class="fas fa-edit"></i> Última atualização:</strong>
            <%= @task.updated_at.strftime("%d/%m/%Y %H:%M") %>
          </p>
        <% end %>
      </div>

      <div class="actions">
        <%= link_to edit_board_column_task_path(@task.column.board, @task.column, @task), 
                    class: "btn btn-secondary",
                    title: "Editar esta tarefa",
                    data: { turbo: true } do %>
          <i class="fas fa-edit"></i>
          Editar
        <% end %>
        
        <%= button_to board_column_task_path(@task.column.board, @task.column, @task), 
                      method: :delete, 
                      class: "btn btn-danger",
                      title: "Excluir esta tarefa",
                      form: { data: { turbo_confirm: "Tem certeza que deseja excluir a tarefa '#{@task.title}'? Esta ação não pode ser desfeita." } } do %>
          <i class="fas fa-trash-alt"></i>
          Excluir
        <% end %>
        
        <% unless @task.status == "Concluído" || @task.column.name == "Concluído" %>
          <%= button_to complete_board_column_task_path(@task.column.board, @task.column, @task), 
                        method: :patch,
                        class: "btn btn-success",
                        title: "Marcar como concluída",
                        form: { data: { turbo_confirm: "Marcar a tarefa '#{@task.title}' como concluída?" } } do %>
            <i class="fas fa-check"></i>
            Concluir
          <% end %>
        <% end %>

      </div>
    </div>
  </main>

  <script>
    function toggleTheme() {
      // Função para alternar tema (se necessário)
      console.log('Toggle theme');
    }
  </script>
</body>
</html>
  <script>
    function toggleTheme() {
      const body = document.body;
      const themeIcon = document.getElementById('theme-icon');
      
      if (body.classList.contains('dark-theme')) {
        body.classList.remove('dark-theme');
        themeIcon.classList.remove('fa-moon');
        themeIcon.classList.add('fa-sun');
        localStorage.setItem('theme', 'light');
      } else {
        body.classList.add('dark-theme');
        themeIcon.classList.remove('fa-sun');
        themeIcon.classList.add('fa-moon');
        localStorage.setItem('theme', 'dark');
      }
    }

    // Load saved theme
    document.addEventListener('DOMContentLoaded', function() {
      const savedTheme = localStorage.getItem('theme');
      const themeIcon = document.getElementById('theme-icon');
      
      if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeIcon.classList.remove('fa-sun');
        themeIcon.classList.add('fa-moon');
      }
    });

    // Auto-hide alerts after 5 seconds
    document.addEventListener('DOMContentLoaded', function() {
      const alerts = document.querySelectorAll('.alert');
      alerts.forEach(alert => {
        setTimeout(() => {
          alert.style.transition = 'opacity 0.5s';
          alert.style.opacity = '0';
          setTimeout(() => {
            alert.remove();
          }, 500);
        }, 5000);
      });
    });
  </script>
</body>
</html>