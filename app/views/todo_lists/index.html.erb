<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ToDoThat - Kanban Board</title>
  <link rel="icon" href="https://cdn-icons-png.flaticon.com/512/595/595067.png" type="image/png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <%= stylesheet_link_tag "kanban", media: "all", "data-turbo-track": "reload" %>

</head>
<body >
  <header>
    <div class="brand">
      <i class="fas fa-tasks"></i>
      ToDoDev
    </div>
    <div class="user">
      <div class="user-icon">
  <%= current_user.name&.first&.upcase || current_user.email&.first&.upcase || 'U' %>
</div>

    </div>
  </header>

  <main class="main">
    <div style="margin-bottom: 1rem;">
    <%= link_to boards_path, class: "btn-back", data: { turbo: false } do %>
      <i class="fas fa-arrow-left"></i> Voltar para os Boards
    <% end %>


</div>

    <h1>Quadro de Tarefas</h1>
    <div class="board">
    <% columns = [@todo_column, @in_progress_column, @done_column].compact %>
      <% { "To Do" => @todo_tasks, "In Progress" => @in_progress_tasks, "Done" => @done_tasks }.each_with_index do |(status, tasks), index| %>
        <% status_class = %w[todo in-progress done][index] %>
        <% column = columns[index] %>

        <div class="column <%= status_class %>">
          <h2>
            <i class="fas <%= ['fa-clock', 'fa-spinner', 'fa-check-circle'][index] %>"></i>
            <%= status %>
          </h2>

        <% if column&.board.present? %>
            <%= link_to new_board_column_task_path(column.board, column), class: "add-task" do %>
              <i class="fas fa-plus"></i> Adicionar nova tarefa
            <% end %>
          <% else %>
            <p style="color:red;">Erro: coluna sem board</p>
          <% end %>

          <div class="task-list" data-column-id="<%= column.id %>">
            <% if tasks.any? %>
              <% tasks.order(:position).each do |task| %>
                <div class="task" data-task-id="<%= task.id %>" onclick="goToTask(event, '<%= board_column_task_path(task.column.board, task.column, task) %>')">
                  <div class="task-content">
                    <div class="task-details">
                      <div class="task-title"><%= task.title %></div>
                      <div class="task-meta">
                        <% if status == "Done" %>
                          <div class="task-countdown completed"
                              data-due-date="<%= task.due_date&.iso8601 || Time.zone.now.iso8601 %>"
                              data-task-done="true">
                            <i class="fas fa-check-circle"></i>
                            <span class="countdown-timer">
                              <span class="completed-text">TASK CONCLUÍDA</span>
                            </span>
                          </div>
                        <% elsif task.due_date.present? %>
                          <div class="task-countdown"
                              data-due-date="<%= task.due_date.iso8601 %>"
                              data-task-done="false">
                            <i class="fas fa-clock"></i>
                            <span class="countdown-timer">
                              <span class="days">0</span>d 
                              <span class="hours">0</span>h 
                              <span class="minutes">0</span>m 
                              <span class="seconds">0</span>s
                            </span>
                          </div>
                        <% end %>

                        <% if task.priority.present? %>
                          <% priority_normalized = task.priority.to_s.downcase.strip %>
                          <div class="task-priority priority-<%= priority_normalized %>">
                            <i class="fas fa-<%= case priority_normalized
                                                when 'alta' then 'exclamation-triangle'
                                                when 'media', 'média' then 'minus'
                                                when 'baixa' then 'arrow-down'
                                                else 'circle'
                                                end %>"></i>
                            <%= task.priority.to_s.capitalize %>
                          </div>
                        <% end %>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            <% else %>
              <div class="empty">Nenhuma tarefa <%= status.downcase %>...</div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </main>
  <script>

      (function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
      document.body.classList.add('light-theme');
    }
  })();

function forceReload() {
  setTimeout(() => {
    location.reload();
  }, 10);
}

function goToTask(event, url) {
  window.location.href = url;
}

function updateCountdown(element) {
  const taskDone = element.dataset.taskDone === 'true';

  if (taskDone) {
    element.classList.add('completed');
    element.querySelector('i').className = 'fas fa-check-circle';
    element.querySelector('.countdown-timer').innerHTML = '<span class="completed-text">Task Concluída</span>';
    return;
  }

  const dueDate = new Date(element.dataset.dueDate);
  const now = new Date();
  const diff = dueDate - now;

  if (diff <= 0) {
    element.classList.add('expired');
    element.querySelector('i').className = 'fas fa-exclamation-triangle';
    element.querySelector('.countdown-timer').innerHTML = '<span class="expired-text">Expirado!</span>';
    return;
  }

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  element.querySelector('.days').textContent = days;
  element.querySelector('.hours').textContent = hours;
  element.querySelector('.minutes').textContent = minutes;
  element.querySelector('.seconds').textContent = seconds;

  element.querySelector('i').className = 'fas fa-clock';

  element.classList.remove('urgent', 'warning', 'normal', 'expired', 'completed');
  if (diff < 1000 * 60 * 60 * 24) {
    element.classList.add('urgent');
  } else if (diff < 1000 * 60 * 60 * 24 * 3) {
    element.classList.add('warning');
  } else {
    element.classList.add('normal');
  }
}

function initCountdowns() {
  const countdowns = document.querySelectorAll('.task-countdown');
  countdowns.forEach(updateCountdown);
}

setInterval(initCountdowns, 1000);

function updateTaskPosition(taskId, columnId, position) {
  fetch(`/tasks/${taskId}/move_column`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      column_id: columnId,
      position: position
    })
  })
    .then(response => response.json())
    .then(data => {
      location.reload();
    });
}

function initDragAndDrop() {
  const taskLists = document.querySelectorAll('.task-list');

  taskLists.forEach(taskList => {
    if (taskList.classList.contains('sortable-loaded')) return;

    new Sortable(taskList, {
      group: 'kanban-tasks',
      animation: 150,
      ghostClass: 'task-ghost',
      chosenClass: 'task-chosen',
      dragClass: 'task-drag',
      handle: '.task-title',

      onStart: () => {
        document.body.classList.add('dragging');
      },

      onEnd: (evt) => {
        document.body.classList.remove('dragging');

        const taskId = evt.item.getAttribute('data-task-id');
        const newColumnId = evt.to.getAttribute('data-column-id');
        const newPosition = evt.newIndex;

        updateTaskPosition(taskId, newColumnId, newPosition);
      }
    });

    taskList.classList.add('sortable-loaded');
  });
}


function toggleTheme() {
  const currentTheme = document.documentElement.getAttribute('data-theme');
  const newTheme = currentTheme === 'light' ? 'dark' : 'light';

  document.documentElement.setAttribute('data-theme', newTheme);

  const themeButton = document.querySelector('.user button[title="Alternar tema"] i');
  if (themeButton) {
    themeButton.className = newTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
  }

  localStorage.setItem('theme', newTheme);
}

function loadTheme() {
  const savedTheme = localStorage.getItem('theme') || 'dark';
  document.documentElement.setAttribute('data-theme', savedTheme);

  const themeButton = document.querySelector('.user button[title="Alternar tema"] i');
  if (themeButton) {
    themeButton.className = savedTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
  }
}

function bindThemeButton() {
  const themeButton = document.querySelector('.user button[title="Alternar tema"]');
  if (themeButton) themeButton.addEventListener('click', toggleTheme);
}

function initializeApp() {
  loadTheme();
  initCountdowns();
  initDragAndDrop();
  bindThemeButton();
}

document.addEventListener('DOMContentLoaded', initializeApp);
document.addEventListener('turbo:load', initializeApp);

function forceReloadNextVisit() {
  sessionStorage.setItem('reload_on_return', 'true');
}

document.addEventListener('DOMContentLoaded', function () {
  if (sessionStorage.getItem('reload_on_return') === 'true') {
    sessionStorage.removeItem('reload_on_return');
    location.reload();
  }
});

  </script>

</body>
</html>